import{_ as s,o as a,c as n,R as p}from"./chunks/framework.M8QmVFdX.js";const o="/vitepress/assets/image1.GBE-7CwG.png",q=JSON.parse('{"title":"electron与vue结合","description":"","frontmatter":{},"headers":[],"relativePath":"blog/electron/electron-vue.md","filePath":"blog/electron/electron-vue.md","lastUpdated":1717050767000}'),l={name:"blog/electron/electron-vue.md"},e=p(`<h1 id="electron与vue结合" tabindex="-1">electron与vue结合 <a class="header-anchor" href="#electron与vue结合" aria-label="Permalink to &quot;electron与vue结合&quot;">​</a></h1><h2 id="项目方案" tabindex="-1">项目方案 <a class="header-anchor" href="#项目方案" aria-label="Permalink to &quot;项目方案&quot;">​</a></h2><p>目前市面上使用electron结合vue有两种方案，1是主体是vue，只是在依赖里面安装了electron，但是这样vue和electron就耦合在一起了，2是electron和vue独立开来，只是把vue的包放进electron里面，我这边选择的第二种</p><h2 id="electron-of-vue" tabindex="-1">electron-of-vue <a class="header-anchor" href="#electron-of-vue" aria-label="Permalink to &quot;electron-of-vue&quot;">​</a></h2><h3 id="_1-文档地址" tabindex="-1">1.文档地址 <a class="header-anchor" href="#_1-文档地址" aria-label="Permalink to &quot;1.文档地址&quot;">​</a></h3><p><a href="https://www.electronjs.org/zh/docs/latest/" target="_blank" rel="noreferrer">中文文档</a></p><h3 id="_2-项目构建" tabindex="-1">2.项目构建 <a class="header-anchor" href="#_2-项目构建" aria-label="Permalink to &quot;2.项目构建&quot;">​</a></h3><p>我们这里需要下载两个项目，一个是vue项目，一个是electron项目，但是最外层也需要一个<code>package.json</code>,这个最外层的文件主要是用来统一管理命令和eslint相关的。</p><p>创建package.json</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span></span></code></pre></div><p>新建<code>electron-app</code>和<code>vue-app</code>文件夹，分别用来存放electron和vue项目,此时目录结构应该为</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">electron-app</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue-app</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">electron-app</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue-app</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">package.json</span></span></code></pre></div><p>初始化vue-app的vue项目（省略，官网很详细）</p><p>初始化electron-app的electron项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./electron-app</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./electron-app</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span></span></code></pre></div><p>安装electron依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">electron</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">electron</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dev</span></span></code></pre></div><p>增加一条命令</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;electron.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;electron.&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span></code></pre></div><p>在<code>electron-app</code>目录下编写<code>main.js</code></p><p>贴一下我的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BrowserWindow</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electron&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createWindow</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">win</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BrowserWindow</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: </span><span style="color:#79B8FF;">1200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#79B8FF;">960</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    webPreferences: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      preload: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;preload.js&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    win.</span><span style="color:#B392F0;">loadURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://localhost:5173/&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    win.webContents.</span><span style="color:#B392F0;">openDevTools</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    win.</span><span style="color:#B392F0;">loadFile</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;./vue_dist/index.html&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">whenReady</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createWindow</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;activate&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (BrowserWindow.</span><span style="color:#B392F0;">getAllWindows</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">createWindow</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;window-all-closed&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (process.platform</span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;darwin&#39;</span><span style="color:#E1E4E8;">) app.</span><span style="color:#B392F0;">quit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });  </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">app</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BrowserWindow</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electron&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWindow</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">win</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BrowserWindow</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">1200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    height: </span><span style="color:#005CC5;">960</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    webPreferences: {</span></span>
<span class="line"><span style="color:#24292E;">      preload: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;preload.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    win.</span><span style="color:#6F42C1;">loadURL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://localhost:5173/&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    win.webContents.</span><span style="color:#6F42C1;">openDevTools</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    win.</span><span style="color:#6F42C1;">loadFile</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;./vue_dist/index.html&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">whenReady</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createWindow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;activate&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (BrowserWindow.</span><span style="color:#6F42C1;">getAllWindows</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">createWindow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;window-all-closed&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (process.platform</span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;darwin&#39;</span><span style="color:#24292E;">) app.</span><span style="color:#6F42C1;">quit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });  </span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><blockquote><p>1.NODE_ENV是环境变量，用来区分开发环境和打包生产环境，开发环境可以直接加载本地url，打包的话旧需要加载打包入口文件，为了统一环境变量，需要在<code>根目录</code>下的<code>package.json</code>下新增<code>cross-env</code>依赖，这个依赖可以统一设置环境变量，后续会告诉用法</p></blockquote><blockquote><p>2.preload.js是electron提供的，用来做一些electron和浏览器的交互，比如获取系统信息，获取文件路径等，可以根据需要进行修改</p></blockquote></div><p>下载好相关依赖后，此时只需要分别运行两个项目就可以看到出现的窗口了。 但是要分别进入两个项目，还要开两个终端来运行，很麻烦，所以可以通过<code>concurrently</code>和<code>wait-on</code>这两个插件来解决，<code>concurrently</code>作用是可以并行多条命令，传统的<code>&amp;</code>只能依次执行，<code>wait-on</code>主要是用来监听端口是否打开，如果打开了就继续执行后面的命令，如果没有打开就一直等待，类似于<code>async/await</code>。</p><p>根目录<code>package.json</code>相关代码</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;install:all&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;yarn &amp;&amp; cd vue-app &amp;&amp; yarn &amp;&amp; cd ../electron-app &amp;&amp; yarn&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=development concurrently </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">yarn dev:vue-app</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">yarn dev:electron-app</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dev:electron-app&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;wait-on http://localhost:5173 &amp;&amp; cd electron-app &amp;&amp; yarn start&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dev:vue-app&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cd vue-app &amp;&amp; yarn dev&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;eslint. --ext.vue,.js,.jsx,.cjs,.mjs --fix --ignore-path.gitignore&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;devDependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;concurrently&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^8.2.2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;eslint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^8.55.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;eslint-plugin-vue&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;latest&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;wait-on&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^7.2.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;cross-env&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^7.0.3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;install:all&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;yarn &amp;&amp; cd vue-app &amp;&amp; yarn &amp;&amp; cd ../electron-app &amp;&amp; yarn&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_ENV=development concurrently </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">yarn dev:vue-app</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">yarn dev:electron-app</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dev:electron-app&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;wait-on http://localhost:5173 &amp;&amp; cd electron-app &amp;&amp; yarn start&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dev:vue-app&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cd vue-app &amp;&amp; yarn dev&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;eslint. --ext.vue,.js,.jsx,.cjs,.mjs --fix --ignore-path.gitignore&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;devDependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;concurrently&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^8.2.2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;eslint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^8.55.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;eslint-plugin-vue&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;latest&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;wait-on&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^7.2.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;cross-env&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^7.0.3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>写好之后直接在根目录执行<code>npm run dev</code>就可以打开窗口了</p><h3 id="_3-项目打包" tabindex="-1">3.项目打包 <a class="header-anchor" href="#_3-项目打包" aria-label="Permalink to &quot;3.项目打包&quot;">​</a></h3><p>最后就是打包相关，网上主要有两种方案<code>electron-builder</code>和<code>electron-forge</code>，但是<code>electron-forge</code>安装的话是没有安装向导的，用户体验差，所以我选择了<code>electron-builder</code></p><p>进入<code>electron-app</code>目录，安装<code>electron-builder</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">electron-builder</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">electron-builder</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dev</span></span></code></pre></div><p>编写相关配置，<code>electron-builder</code>是需要在<code>package.json</code>中配置的，我这里贴一下我的配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;appId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;com.my-website.my-app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;productName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;tlc_app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;copyright&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Copyright © 2021 kuari&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;mac&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;category&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;public.app-category.utilities&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;nsis&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;oneClick&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;allowToChangeInstallationDirectory&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;directories&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;buildResources&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;assets&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;output&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;dist_electron&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;appId&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;com.my-website.my-app&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;productName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;tlc_app&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;copyright&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Copyright © 2021 kuari&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;mac&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;category&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;public.app-category.utilities&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;nsis&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;oneClick&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;allowToChangeInstallationDirectory&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;directories&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;buildResources&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;assets&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;output&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;dist_electron&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>主要是一些app名，打包文件之类的，具体的可以去官网查看</p><p>然后在<code>package.json</code>中增加一条命令</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;electron-builder&quot;</span><span style="color:#E1E4E8;">,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;electron-builder&quot;</span><span style="color:#24292E;">,</span></span></code></pre></div><p>然后回到根目录，在根目录的<code>package.json</code>中增加一条命令</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=production yarn build:vue-app &amp;&amp; yarn build:electron-app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build:electron-app&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cd electron-app &amp;&amp; yarn build&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build:vue-app&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cd vue-app &amp;&amp; yarn build&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_ENV=production yarn build:vue-app &amp;&amp; yarn build:electron-app&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build:electron-app&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cd electron-app &amp;&amp; yarn build&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build:vue-app&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cd vue-app &amp;&amp; yarn build&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后在根目录执行<code>npm run build</code>，打包完成之后，会在<code>electron-app</code>目录下生成<code>dist_electron</code>文件夹，里面就是打包好的文件了，点击里面的<code>.exe</code>文件，就可以安装了</p><h3 id="_4-可能出现的问题" tabindex="-1">4. 可能出现的问题 <a class="header-anchor" href="#_4-可能出现的问题" aria-label="Permalink to &quot;4. 可能出现的问题&quot;">​</a></h3><blockquote><p>1.electron整个过程看起来比较简单，但是由于下载和打包的网络问题，会很复杂，首先是安装electron，会经常失败，所以需要切换镜像来安装，推荐使用<code>yarn</code>，这个过程需要有耐心</p></blockquote><blockquote><p>2.打包，由于使用<code>electron-builder</code>打包的时候会去下载相关依赖，网络不行很可能下载报错而导致打包不成功，如果失败了，可以自行下载相关包，看报错信息哪里报错，点击那个链接会弹到下载页，下载就行，下载解压后放在如下文件夹下</p></blockquote><p><img src="`+o+'" alt="图片"></p><h3 id="_5-项目模板地址" tabindex="-1">5.项目模板地址 <a class="header-anchor" href="#_5-项目模板地址" aria-label="Permalink to &quot;5.项目模板地址&quot;">​</a></h3><p><a href="https://github.com/tlc123321/electron-of-vue" target="_blank" rel="noreferrer">electron-of-vue</a></p>',45),t=[e];function c(r,E,y,i,u,d){return a(),n("div",null,t)}const C=s(l,[["render",c]]);export{q as __pageData,C as default};
