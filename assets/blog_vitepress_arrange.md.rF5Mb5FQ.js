import{_ as s,o as a,c as n,R as l}from"./chunks/framework.M8QmVFdX.js";const p="/vitepress/assets/github.yXKeSKoX.png",e="/vitepress/assets/github2.5uOuK6Eb.png",o="/vitepress/assets/github3.oFGIll4Y.png",t="/vitepress/assets/github4.hwqO9efy.png",_=JSON.parse('{"title":"github部署vitepress","description":"","frontmatter":{},"headers":[],"relativePath":"blog/vitepress/arrange.md","filePath":"blog/vitepress/arrange.md","lastUpdated":1701161315000}'),c={name:"blog/vitepress/arrange.md"},r=l('<h1 id="github部署vitepress" tabindex="-1">github部署vitepress <a class="header-anchor" href="#github部署vitepress" aria-label="Permalink to &quot;github部署vitepress&quot;">​</a></h1><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p>同事的博客：<a href="https://libraheresy.github.io/site/blog/%E4%BD%BF%E7%94%A8_GithubPages_%E9%83%A8%E7%BD%B2_VitePress" target="_blank" rel="noreferrer">使用gitbub Pages 部署 VitePress</a></p><h2 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h2><h3 id="_1-新建仓库" tabindex="-1">1.新建仓库 <a class="header-anchor" href="#_1-新建仓库" aria-label="Permalink to &quot;1.新建仓库&quot;">​</a></h3><p>在github上新建一个仓库，这里随便命名，比如叫做<code>vitepress-demo</code></p><h3 id="_2-推送代码" tabindex="-1">2.推送代码 <a class="header-anchor" href="#_2-推送代码" aria-label="Permalink to &quot;2.推送代码&quot;">​</a></h3><p>github项目拉取下来，代码放进去，然后推送到远程仓库</p><h3 id="_3-获取token" tabindex="-1">3.获取token <a class="header-anchor" href="#_3-获取token" aria-label="Permalink to &quot;3.获取token&quot;">​</a></h3><p>点击右上角的头像，<code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; <code>Tokens(classic)</code> -&gt; <code>Generate new token</code> 这里目前新版的有个beta版本的，我用的老版本的 <img src="'+p+'" alt="图片"></p><ol><li>Note里面随意填写</li><li>时效Expires选择<code>No expiration</code></li><li>勾选上<code>repo</code></li><li>保存之后会生成一个<code>token</code>，<code>token</code>自己记住，可以放在项目里面保存，后续需要用到</li></ol><p><img src="'+e+`" alt="图片"> 5. 进入此项目，点击 <code>Secrets and variables</code> -&gt; <code>Actions</code> -&gt; <code>New repository secret</code>，<code>Name</code>填<code>ACCESS_TOKEN</code>，<code>Value</code>填刚才获取到的<code>token</code></p><h3 id="_4-新建github-action" tabindex="-1">4.新建github action <a class="header-anchor" href="#_4-新建github-action" aria-label="Permalink to &quot;4.新建github action&quot;">​</a></h3><p>在项目根目录新建<code>.github/workflows/main.yml</code>文件，内容如下：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># name 可以自定义</span></span>
<span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deploy GitHub Pages</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 触发条件：在 push 到 main/master 分支后，新的 Github 项目 应该都是 main，而之前的项目一般都是 master</span></span>
<span class="line"><span style="color:#79B8FF;">on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">push</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">branches</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 任务</span></span>
<span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">build-and-deploy</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 服务器环境：最新版 Ubuntu</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 拉取代码</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Checkout</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/checkout@v2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">persist-credentials</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 生成静态文件</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Build</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">run</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">npm install -g yarn &amp;&amp; yarn &amp;&amp; yarn docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 部署到 GitHub Pages</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deploy</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">JamesIves/github-pages-deploy-action@releases/v3</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">ACCESS_TOKEN</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${{ secrets.ACCESS_TOKEN }}</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 也就是我们刚才生成的 secret</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">BRANCH</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">gh-pages</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 部署到 gh-pages 分支，因为 main 分支存放的一般是源码，而 gh-pages 分支则用来存放生成的静态文件</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">FOLDER</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">docs/.vitepress/dist</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># vitepress 生成的静态文件存放的地方</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># name 可以自定义</span></span>
<span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deploy GitHub Pages</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 触发条件：在 push 到 main/master 分支后，新的 Github 项目 应该都是 main，而之前的项目一般都是 master</span></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">branches</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 任务</span></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">build-and-deploy</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 服务器环境：最新版 Ubuntu</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 拉取代码</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Checkout</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">persist-credentials</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 生成静态文件</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Build</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">run</span><span style="color:#24292E;">: </span><span style="color:#032F62;">npm install -g yarn &amp;&amp; yarn &amp;&amp; yarn docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 部署到 GitHub Pages</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deploy</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">JamesIves/github-pages-deploy-action@releases/v3</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">ACCESS_TOKEN</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${{ secrets.ACCESS_TOKEN }}</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 也就是我们刚才生成的 secret</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">BRANCH</span><span style="color:#24292E;">: </span><span style="color:#032F62;">gh-pages</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 部署到 gh-pages 分支，因为 main 分支存放的一般是源码，而 gh-pages 分支则用来存放生成的静态文件</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">FOLDER</span><span style="color:#24292E;">: </span><span style="color:#032F62;">docs/.vitepress/dist</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># vitepress 生成的静态文件存放的地方</span></span></code></pre></div><p>注意：分支一般都是master，看自己项目，<code>FOLDER: docs/.vitepress/dist</code>这个静态文件存放的地址，可以自己本地打包后自行查看，确保一致即可。</p><h3 id="_5-可能出现的问题" tabindex="-1">5.可能出现的问题 <a class="header-anchor" href="#_5-可能出现的问题" aria-label="Permalink to &quot;5.可能出现的问题&quot;">​</a></h3><p><img src="`+o+'" alt="图片"></p><ol><li>假如你的仓库名是<code>vitepress</code>,那么你的页面地址应该是<code>https://usrname.github.io/vitepress/</code>，其中<code>username</code>是你的用户名，此时你需要在<code>config.js</code>里面修改<code>base</code>为<code>/vitepress/</code>。</li><li>需修改Branch为<code>gh-pages</code></li></ol><h3 id="_6-测试" tabindex="-1">6.测试 <a class="header-anchor" href="#_6-测试" aria-label="Permalink to &quot;6.测试&quot;">​</a></h3><p><img src="'+t+'" alt="图片"> 推送代码到远程仓库，等待github action执行完成，然后在github上查看效果</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>github action可以实现自动化部署，可以将项目部署到github pages上，这样就可以实现自动化部署了，非常方便。</p>',23),i=[r];function E(y,d,h,u,g,b){return a(),n("div",null,i)}const A=s(c,[["render",E]]);export{_ as __pageData,A as default};
